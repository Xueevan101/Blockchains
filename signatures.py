# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UBSRIMzyTUva4mOL4XpeSiTqCxWepjwV
"""

from web3 import Web3
import eth_account
from eth_account.messages import encode_defunct

#make a random account and sign with ethereum functions
def sign(m):
    w3 = Web3()
    account_object = eth_account.Account.create()
    private_key = account_object.key
    public_key = account_object.address
    message = encode_defunct(text=m)
    signed_message = eth_account.Account.sign_message(message, private_key=private_key)

    assert isinstance(signed_message, eth_account.datastructures.SignedMessage)
    return public_key, signed_message

#verify that we have a boolean value
def verify(m, public_key, signed_message):
    w3 = Web3()
    message = encode_defunct(text=m)
    signer = eth_account.Account.recover_message(message, signature=signed_message.signature)
    valid_signature = (signer == public_key)

    assert isinstance(valid_signature, bool), "verify should return a boolean value"
    return valid_signature


if __name__ == "__main__":
    import random
    import string

    for i in range(10):
        m = "".join([random.choice(string.ascii_letters) for _ in range(20)])

        pub_key, signature = sign(m)

        # Modifies every other message so that the signature fails to verify
        if i % 2 == 0:
            m = m + 'a'

        if verify(m, pub_key, signature):
            print("Signed Message Verified")
        else:
            print("Signed Message Failed to Verify")
