# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UBSRIMzyTUva4mOL4XpeSiTqCxWepjwV
"""

from web3 import Web3
from web3.providers.rpc import HTTPProvider
import requests
import json

bayc_address = "0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D"
contract_address = Web3.to_checksum_address(bayc_address)

# You will need the ABI to connect to the contract
# The file 'abi.json' has the ABI for the bored ape contract
# In general, you can get contract ABIs from etherscan
# https://api.etherscan.io/api?module=contract&action=getabi&address=0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D
with open('ape_abi.json', 'r') as f:
    abi = json.load(f)

############################
# Connect to an Ethereum node
json_data = {
        "pinataContent": data
}
headers = {
        "pinata_api_key": "af9600d75aec06ac35ae",
        "pinata_secret_api_key": "f4283784c4195bd20b5fab6eb160ade5d8351bd4dd66ee0ce0ceda61ea728d06",
        "Content-Type": "application/json"
}
api_url = "https://api.pinata.cloud/pinning/pinJSONToIPFS"
provider = HTTPProvider(api_url)
web3 = Web3(provider)
contract = web3.eth.contract(address=contract_address, abi=abi)
response = requests.post(url, headers=headers, json=json_data)
def get_ape_info(ape_id):
    assert isinstance(ape_id, int), f"{ape_id} is not an int"
    assert 0 <= ape_id, f"{ape_id} must be at least 0"
    assert 9999 >= ape_id, f"{ape_id} must be less than 10,000"

    data = {'owner': "", 'image': "", 'eyes': ""}

    try:
        # 1. Get owner address
        owner = contract.functions.ownerOf(ape_id).call()

        # 2. Get tokenURI (may start with "ipfs://")
        token_uri = contract.functions.tokenURI(ape_id).call()
        if token_uri.startswith("ipfs://"):
            token_uri = token_uri.replace("ipfs://", "https://ipfs.io/ipfs/")

        # 3. Fetch metadata from tokenURI
        response = requests.get(token_uri)
        response.raise_for_status()
        metadata = response.json()

        # 4. Extract image URI and eyes trait
        image = metadata.get('image', "")
        if image.startswith("ipfs://"):
            image = image.replace("ipfs://", "https://ipfs.io/ipfs/")

        # 5. Extract "Eyes" attribute
        eyes = ""
        for attr in metadata.get('attributes', []):
            if attr.get('trait_type') == "Eyes":
                eyes = attr.get('value')
                break

        # Final dictionary
        data = {
            'owner': owner,
            'image': image,
            'eyes': eyes
        }

    except Exception as e:
        print(f"Error retrieving ape {ape_id}: {e}")

    # Validate return format
    assert isinstance(data, dict), f'get_ape_info({ape_id}) should return a dict'
    assert all([a in data.keys() for a in ['owner', 'image', 'eyes']]), f"return value should include the keys 'owner','image' and 'eyes'"
    return data
